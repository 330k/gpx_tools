/* Copyright 2022 Kei Misawa All Rights Reserved */
"use strict";let coords_base=[],coords_target=[],nearest_base=null,nearest_target=null;function updateCoordsBase(t){coords_base=[];for(let e=0;e<t.length;e++){let s=[];for(let r=0;r<t[e].length;r++){const n=latlng2XYZ(t[e][r].lat,t[e][r].lng);s.push({lat:t[e][r].lat,lng:t[e][r].lng,X:n.X,Y:n.Y,Z:n.Z})}coords_base.push(s)}coords_base.length?(console.time("construct"),nearest_base=new nearestNeighbor(coords_base),console.timeEnd("construct")):nearest_base=null}function updateCoordsTarget(t){coords_target=[];for(let e=0;e<t.length;e++){let s=[];for(let r=0;r<t[e].length;r++){const n=latlng2XYZ(t[e][r].lat,t[e][r].lng);s.push({lat:t[e][r].lat,lng:t[e][r].lng,X:n.X,Y:n.Y,Z:n.Z})}coords_target.push(s)}coords_target.length?(console.time("construct"),nearest_target=new nearestNeighbor(coords_target),console.timeEnd("construct")):nearest_target=null}function calculateDifference(t,e,s){const r={base:[],target:[]};if(nearest_target){console.time("Nearest Neighbor Search");for(const s of coords_base){const n=[];let a=[];for(let r=0;r<s.length;r++){if(e||void 0===s[r].dist_dev){const t=nearest_target.searchNearest(s[r]).distance;s[r].dist_dev=t}s[r].dist_dev>t&&(a.length>0&&a[a.length-1]+1!==r&&(n.push(a),a=[]),a.push(r))}a.length&&n.push(a),r.base.push(n)}console.timeEnd("Nearest Neighbor Search")}if(nearest_base){console.time("Nearest Neighbor Search");for(const e of coords_target){const n=[];let a=[];for(let r=0;r<e.length;r++){if(s||void 0===e[r].dist_dev){const t=nearest_base.searchNearest(e[r]).distance;e[r].dist_dev=t}e[r].dist_dev>t&&(a.length>0&&a[a.length-1]+1!==r&&(n.push(a),a=[]),a.push(r))}a.length&&n.push(a),r.target.push(n)}console.timeEnd("Nearest Neighbor Search")}return r}addEventListener("message",(function(t){console.log(t.data),postMessage(self[t.data.func](...t.data.args))}));class RDPTree{constructor(t,e,s=!1){this.coords=t,this.dist_func=e,this.balanced=s,this.rdptree=this._createRDPTree(0,t.length-1)}searchNearest(t,e=Number.MAX_VALUE){return this._searchNearest(this.rdptree,t,e)}_createRDPTree(t,e){let s=-Number.MAX_VALUE,r=-1;for(let n=t+1;n<=e-1;n++){const a=this.dist_func(this.coords[t],this.coords[e],this.coords[n]).distance;a>s&&(s=a,r=n)}return this.balanced&&(r=Math.floor(.5*(t+e))),s>0?{start:t,end:e,max_distance:s,max_index:r,left:this._createRDPTree(t,r),right:this._createRDPTree(r,e)}:{start:t,end:e,max_distance:0,max_index:-1,left:null,right:null}}_searchNearest(t,e,s){if(0===t.max_distance)return{start:t.start,end:t.end,...this.dist_func(this.coords[t.start],this.coords[t.end],e)};const r=this.dist_func(this.coords[t.start],this.coords[t.max_index],e).distance,n=this.dist_func(this.coords[t.max_index],this.coords[t.end],e).distance,a=r-t.left.max_distance>s,o=n-t.right.max_distance>s;if(a&&o)return{start:null,end:null,distance:Number.MAX_VALUE};if(a)return this._searchNearest(t.right,e,s);if(o)return this._searchNearest(t.left,e,s);let c,i,h,d;r<n?(h=t.left,c=r,d=t.right,i=n):(h=t.right,c=n,d=t.left,i=r);const l=this._searchNearest(h,e,s);if(0===l.distance)return l;const u=Math.min(s,l.distance);if(i-d.max_distance>u)return l;const _=this._searchNearest(d,e,u);return l.distance<_.distance?l:_}}class LinearSearch{constructor(t,e){this.coords=t,this.dist_func=e}searchNearest(t){let e=Number.MAX_VALUE,s=-1,r=null;for(let n=0;n<this.coords.length-1;n++){const a=this.dist_func(this.coords[n],this.coords[n+1],t);a.distance<e&&(e=a.distance,s=n,r=a)}return{start:s,end:s+1,...r}}}class nearestNeighbor{constructor(t){const e=function(t,e,s){const r=t.X,n=t.Y,a=t.Z,o=e.X,c=e.Y,i=e.Z,h=s.X,d=s.Y,l=s.Z;let u=((r-o)*(r-h)+(n-c)*(n-d)+(a-i)*(a-l))/((r-o)*(r-o)+(n-c)*(n-c)+(a-i)*(a-i));u>1?u=1:u>0||(u=0);const _=r-(r-o)*u,g=n-(n-c)*u,f=a-(a-i)*u;return{distance:Math.sqrt((_-h)*(_-h)+(g-d)*(g-d)+(f-l)*(f-l)),x:_,y:g,z:f,t:u}};this.dist_func=e,this.coords_array=t,this.RDPTrees=t.map((t=>new RDPTree(t,e)))}searchNearest(t){let e=Number.MAX_VALUE,s=null,r=this.RDPTrees.map(((e,s)=>({index:s,distance:this.dist_func(this.coords_array[s][0],this.coords_array[s][this.coords_array[s].length-1],t).distance})));r.sort(((t,e)=>t.distance-e.distance));for(let n=0;n<r.length;n++){let a=this.RDPTrees[r[n].index].searchNearest(t,e);a.distance<e&&(e=a.distance,s={coord_index:r[n].index,start:a.start,end:a.end})}return{distance:e,info:s}}}function latlng2MercatorXY(t,e){const s=Math.PI/180;return{X:e*s,Y:Math.asinh(Math.tanh(t*s))}}function mercatorXY2latlng(t,e){const s=180/Math.PI;return{lat:Math.atanh(Math.sinh(e))*s,lng:t*s}}function latlng2XYZ(t,e,s=0){const r=1/298.257223563,n=r*(2-r),a=Math.PI/180,o=t*a,c=e*a,i=Math.sin(o),h=Math.cos(o),d=Math.sin(c),l=Math.cos(c),u=1-i*i*n,_=6378137/Math.sqrt(u);return{X:(_+s)*h*l,Y:(_+s)*h*d,Z:(.9933056200098587*_+s)*i}}function xyz2Latlng(t,e,s){const r=6378137,n=1/298.257223563,a=n*(2-n),o=Math.PI/180,c=Math.sin,i=Math.cos,h=Math.sqrt,d=(Math.atan,Math.atan2),l=(Math.abs,h(t*t+e*e)),u=d(s,(1-n)*l);return{lat:d(s+42841.31151331357*c(u)**3,l-a*r*i(u)**3)/o,lng:d(e,t)/o}}function hubeny(t,e,s,r){const n=1/298.257223563,a=n*(2-n),o=Math.PI/180,c=Math.sin,i=Math.cos,h=Math.tan,d=Math.sqrt,l=(t-s)*o,u=((e-r+180)%360-180)*o,_=.5*(t+s)*o,g=c(_),f=i(_),M=6378137/d(1-g*g*a),b=.006739496742276434*f*f,m=b*b,N=b*m,x=h(_),p=x*x,X=p*p,P=l*l,Y=l*P,Z=l*Y,A=l*Z,D=u*u,E=u*D,T=u*E,v=u*T,R=u*v,L=f*f,y=f*L,I=f*y,S=f*I,U=f*S,V=M*f*u+M*f/24*(1-b+m-N-9*p*b+18*p*m-27*p*N)*P*u+M*y/24*-p*E+M*f/5760*(7+10*b-27*m-54*p*b-642*p*m+675*p*N)*Z*u+M*y/5760*(-16-70*p-158*p*b+158*p*m+90*X*b-180*X*m)*P*E+M*S/5760*(-24*p+3*X-27*p*b)*v+M*f/1935360*62*(l*A)*u+M*y/1935360*(-416-2954*p)*Z*E+M*S/1935360*(-192-1680*p+2652*X)*P*v+M*(f*U)/1935360*(-816*p+528*X-6*p)*(u*R),q=M/(1+b)*l+M/24*(3*b-6*m+9*N-3*p*b+21*p*m-54*p*N)*Y+M*L/24*(-2-3*p+3*p*b-3*p*m+3*p*N)*l*D+M/5760*(-36*b+207*m+36*p*b-1062*p*m+135*X*m)*A+M*L/5760*(-16-60*p+4*b-4*m+102*p*b+48*p*m+90*X*b-630*X*m)*Y*D+M*I/5760*(-8-20*p+15*X-8*b+96*p*b-15*X*b+15*X*m)*l*T+M*L/1935360*(-192-2016*p)*A*D+M*I/1935360*(256+784*p+4200*X)*Y*T+M*U/1935360*(-64-224*p+1148*X-42*(p*X))*l*R;return d(V*V+q*q)}
